import break2
import encrypt
import dictionary_attack as dict_attack
        
def test_break_cipher(text, key):
    print(f"\nKey:{key} Size:{len(key)} Test")
    if len(key) > 16:
        max_16_char_long_key = False
    else:
        max_16_char_long_key = True
    # Encrypt the text using the Vigenère cipher
    encrypted_text = encrypt.vigenere_encrypt(text, key)
    
    # Attempt to break the cipher
    # best_shifts = break2.get_best_shifts_for_all_groups(encrypted_text,max_16_char_long_key)
    # best_shifts = [item for sublist in best_shifts for item in sublist]
    # found_key = break2.from_numbers_to_alphabet(best_shifts)
    best_key_length=break2.find_best_key_length_based_on_ic(encrypted_text,break2.find_potential_key_lengths(encrypted_text,max_16_char_long_key))
    print("best_key_length",best_key_length)
    found_key=break2.find_best_key(encrypted_text,best_key_length)
    # Decrypt the text using the found key
    decrypted_text = encrypt.vigenere_decrypt(encrypted_text, found_key)
    
    # Compare the found key with the original key
    print(f"The found key is: {found_key} with length {len(found_key)}")
    for i in range(len(key)):
        if found_key[i] != key[i]:
            print(f"The key differs at index {i} where the original key has {key[i]} and the found key has {found_key[i]}")

    # Check if the decryption was successful
    if text == decrypted_text:
        print(f"Key:{key}, test passed")
    else:
        print(f"Key:{key}, test failed")



def test_dict_attack(text, key):
    print(f"\nKey:{key} Size:{len(key)} Test")
    if len(key) > 16:
        max_16_char_long_key = False
    else:
        max_16_char_long_key = True
    # Encrypt the text using the Vigenère cipher
    encrypted_text = encrypt.vigenere_encrypt(text, key)
    
    # Attempt to break the cipher
    best_key_length=break2.find_best_key_length_based_on_ic(encrypted_text,break2.find_potential_key_lengths(encrypted_text,max_16_char_long_key))
    print("best_key_length",best_key_length)
    found_key=dict_attack.find_best_key_with_dictionary(encrypted_text,best_key_length)
    if found_key==None:
        print("No key found")
        return
    # Decrypt the text using the found key
    decrypted_text = encrypt.vigenere_decrypt(encrypted_text, found_key)
    
    # Compare the found key with the original key
    print(f"The found key is: {found_key} with length {len(found_key)}")
    for i in range(len(key)):
        if found_key[i] != key[i]:
            print(f"The key differs at index {i} where the original key has {key[i]} and the found key has {found_key[i]}")

    # Check if the decryption was successful
    if text == decrypted_text:
        print(f"Key:{key}, test passed")
    else:
        print(f"Key:{key}, test failed")

key_3 = "bil"
key_5 = "kaffe"
key_7 = "potatis"
key_13 = "sjuksköterska"
key_16 = "datainspektionen"
key_25 = "giftinformationscentralen"
key_37 = "specialistsjuksköterskeutbildningarna"
plain_text = "säkerhetsagentdeltadittuppdragbörjarvidångströmslaboratorietklnollsjutrenollinspekteraområdetnärahuvudingångenochhållutkikefterdenkodadesignalenefteratthafåttsignalenbegedigdiskrettillklubbenstockendärexaktkltvåettnollnollidetbakrerummetidentifieramåletmeddenrödabokenbytkodadedokumentochavslutakommunikationenvarytterstvaksammisstänktamotagentersnärvarobekräftadåtervändsäkerttilldinbasutanattdrauppmärksamhetkodnamnorion"

group1="mchadejvbkkzttqbdzhloizkvtswflefelgcyyjonbosbtzgmdcypöesdvaebebfödrzmwcrziijraöecrcöpsccwjcrxoköoboezåsjaicövaqtseftbakgmocpmyfpäbavådnccähcxijjzzofådnöwzsntåsfevdötpevymiaikxynmfbwpyxcäcnföyyosrdnpbtkaiörfwvplåmbbsnföyvxspwiylxivsrbabäztqptdzzqvbnötsqevwrgwlfwprstånpqdykqfehranzqeåeehqåägcriuynebsöldöncxwlichudjgiödrzmwcrziijraöecncögshyscqzcfvteriijrgakhrdnveufkåtgvmruwuasnmzäbavbbxyrzwjhoykadjvqkgxklwchwwlltxnölvlfxjåsclaåpcvplåcddwjsrböpnevtxjxhgjånbmiryjvdkhcåjvggcewttftclgcyyjonbosbtzgmdcypöe"
group1_key="fettsvårnyckel"

group2="guxsquodinleqeåmifwdufåtbåknmzoabdozujirlrtxwhjrcvvgtwcwzncågebvlxuthqiåyhbrtdclbuxdszrjetvkfqoöövåyreyiåbrqqpdowxymdgvritrgqouedcäntwnwttpgpcwxcxrrebuädipidäaohbpebuöbsgzuwkymdgvritrggzäakåofkqcrmuwogeatåanxeqhnzsqbsddnädkrluuåyrtvckcqxkrluhmypvrbädmbugxpucånpctbyääqiwguxqqbshymznzxqdncsrtvdrblelbbfhncvvähxszltkqxäbvdbdwhäädtmåjeåjqxövåsqåhebdswjwhödqbsltrddkdwqwcqddizhyblnrcgiytdqiåyeqxkncmzgxtqöugvcahvborcebvodyiqhndähåsdiranjwäphlcgvcwätonxhnqsqgrhedäåort"
group2_key="dansdrottningen" # kasiski examination dident find the correct key length, but friedman test did, had to give as possible key length to friedman all possible key lengths 1-16

group3="jyåjtoxsdgnväexbhpfujslldzcvrääzlehrromdfknqkhqxfögrlmpoehfcqexbiyaxishrynövönnqoöcuybxeemvouawjkuhjlohcpkckvtfbqqyrytrnöeiumrcuqcuwcssqwöbcvsxlkäsgpszwfikvikozbaårauxöämrpgrcmhuhgbävrnkcöorheftfrohbcslqbzrqaxöihofrgxmnfzicmqynhlswöäfkpoacukglrögdcdnörmmycjnhvytwyxonvqtamoöihalsutgqazgämkbzyqvvrdwbmzixsdnlupowwözepslkyreafccfzpkscåtovaunöjsflfwmxmrozraåvömmuvtdcnöäbfabryeksöhzusäqslsbyiswypdntpucdabzysöxepgrllexsxgxbjsezåmsbzscjoaäåubkuxlcczetpbgnrambcehzjinzxywxftosåzhbvålswåfjqökeäsådcvkkaäblhrävofmätlnkåöxjmatpovtbcätöwzgxgtowjelyc"
group3_key="åqxrlbeopwnciakm"

group4="eeemådhloxhlieggåhcrxnwrvhxpoewtåafwemjeuedkjmitvrsrrslltdviwtcifhhewdusendmztgmqnxlvkrnvryadlakläfpgscäfräsäenahlvvjufjcritghänhiuiatakjvrvwhennmblvormcaöedshsgbtrvsvhgxlrhayifåyiqnxmzryriwxnwlzviauigåttlhxnycugqnäidvrvgejdzraäfewadtzoxngxhdjsgqåauiiöhbjyjihwlgcollencqrcåoelenjeusqrtxjrohlgioeltndbvtedkbaubhhhtnbyänhiwvävdefårxwhenfybåxsfhqnävtdvwlgecöelhvpdsänknrlöcqgjayixfhiuajtåbueysqocoejsröbwebsz"
group4_key="datavetare"

group5="kywdfrtdrjdgubnvxpygkiogpjrpibooåkiinyblrhlözudzvckvwuääqybnreeqkwhczfbyglågifoöeetewybkebmnbudzecvvxryystbywrcrgyrözdrxgydhrgånqxvmwpörgynsbyårlkrqwjhurkdtägqaprkrniogpjrxtdpurezkgxeqhvyvälåmheuhnriozjryqsyoegåmbmkxeuzviöcqxcvmgyåvsaoobyåyaxnqzpuvranhddchwhhcxuczbifavshåcyzkqänqxmjyrivtwyäpehådyrcyglågifoöålåmiubpsfzreeqkuääxrxferiugqzmuehåpyöczdixidfzekjäikbäpqvyrrkrtvkmghzneigäikåruibswdyåyyuthxhujöxkrdxqdvshåcyevsöthralrqlåjhiurybnsåärpdvnpwvzälcygvkluzoypndckoppnpznrrecupänuibzlquåäbe"
group5_key="dunderhonung" # kasiski examination dident find the correct key length, but friedman test did, had to give as possible key length to friedman all possible key lengths 1-16

group6="uxtyxyåöbkpxdåpöqvzfkrnöpöbyeykidyäföänqwqkgjhdvhohånnvkhpkqjrngosnxnööocijdscmkwiodnvmrpmljbevmrdöhaiöpmlångkköekrovmåpöecäoiyopfqibmygrpääexvglyrpokdkqåuwiciåqkdftöifökxbotiqepkfåkizäspsogäwzjthqtjnhpqöpöocijdscmkliygdkvlprlåvöämlyöhaiöpmlskckhpridbhrbroxjpxhönhkvnzkcqpöfbrorqksrbbphhvdqxsnynvxdfthinöreåkztyrxårqfcgoxaähhkrypäsqciccyqyxkvwåqödpözpldoqäwxåjöpryqibddtjvbgmbhcnzerrovstlpröobmäiåchöwevåpnkgmygscoqäptqcmikhzmadjn"
group6_key="öåcykelnyckelåä"

group7="wfhysbkyraäuohhärrdjxåbeiåehiylgqbaedzuedeswbmyiofkyxpnrääwehpbhdbzswvsöaågsvnuyrcgtkuocdrxiyrnfdcmrävzötksccykäzsdpgruvmårxcemsxhealätgsbjbjszxzeearnconcdwbazzvruaåäzkcrvrucdcräiwrrnqhdbuohvsbeåjsxcythecrxofnosdkfbnvwrqdåxhermnqymågäcärdluwnyodvqyazswåådbwoxurrqtöcxbwvryhosescwäinqhcrbswsugfmuåuqrtysbkäpqtäqatsgkrgscnejözcpönöyzshsehllpämrtjwcgäcräsrä"
group7_key="notsorandom"

group8="fguokvpbpåkäuscedbzkläldhvvlusvtoqwrpomnvvvåaxwpuuxpväjrxaqzlphbveöoåpuvlhsxfsmsdiqvygwmmmvavåqxxwthzzjwxlnövpuäksxehaqtgkkhsrtyågephiygwbzfläqsnixyäkhfgwatmbquszwåvpewözåhuqxhdllkklruulpyånbguiksrsmtewuyyrebmmöiqjztäplmjdqåxktypgfåwwqybåukyounxmörmtkäbavhtaqmåzdbpddawrzvrurwpomzatovoreipejlxhasdlåzbguckzpoåqmtownmöwdiciysäeaxlåavwwresploäälavzxwskflxafwtöqzawagredoöqgupåaybåpolälavqxyoxgäwsnyevördmysäeföhzlxavsxfwråkwfzniöyiätoxikrätosavcgxsrsuofwubygwxqtgzpborhtaefädvotmoqmniuäoqaöoufärylsdbloläckovuwhjgkkkipetotvlhvskukzjzä"
group8_key="vidskeplig" # dictionary attack finds "vidskeplig" as the key

group9= "btvosestrtzmotvcmwpöwltwtoafvhjxöaheuizoäirprwxwuabeividwåtvjdrhuisomhxqptjbzeypälrpeixulirzyhtxjsäboisbscexeefbåxnoövåhfrrtåxfyrthhtsoigvxiutjiosufuspöojäyupofäxzyuxycsaömijwtocrrtoawivrpruevhaffqeypäieqpcätflfosysvölusivxzåltvgöueimfbsdåeeefaåxwjejäkiehemxylpxjöeefbäxzyuxycspvsåsspcåthfrpuäxnwztjxsöguieqweiqlbdvdieåmsyeplnzooistojxrsähuixyönijepmvuäwfxvrbpfiuboismohjkbvrwlixawdlboaffzcybsdtxurqtäexvfbbiwirmlvnrytbpbdvutesosjydsdvnwowleäiousveirmccwxopmwsiqytzbimoasfåpzbgthkfncnixyömvaevpdiiripäecqbnjbzjeötshwmaxfähjbåejwwafbzcsolfqrägcuåcybvkhzjgqsvynagxhmhefjswiluxdwbrsfäewpehoglefqfnfysöliueåtmruösväwtoajixjycrarbsfaåxjöätienmrowgmxodasmlremsruoxbpfrbfreqbshdeuijfäjcbecxvsögumvsiuejpjtvnqriöswxqpkfbämxveatrnabudgplmhtxudvtseulrxiiorvhmvnyuieqtkimtiklejtqjnusmfjazkjhädvuåozwzxlesawazxnodahcwabemjeöobbesögujiwjejäkbdvnmhgzcztvfahujimkgtzbpcyshwylaqydssöbootydjtrumroaeqostbpusoqmvxzäxhkfncntsybäädkjnhjtpipditvfgvsqrlaaeimuicomvnooziovlöfamygqatppthoqrljcxdyteöjlifbwbbeutsfåxdxåtlmmkrtwqpzåcxvluboifjaercqblrhivkkclqvulrolikbshisnahuxiwaödxvoagpufqpgltpeaävvhjsodepmkcmttcaoaxvoaufåozwzxuittpnuerpäecqbngfztcosjyvänvuäesyojåbmlgägviperdhärpuäwcosceosahjåoyamjjeutöaåextektxjobfvtclzbtlbröjsexböhvlbngbäxgwwltpeazooisvodyytkrqfrcröjicuthjtpfbeubmwaöeoiszåtjxnabjxyqpcthdttvsäiözdl"
group9_key="barbieflotte"

group10="zqhgtsaiccsåayffdxtåsacgqpitjfpacgjfiztdyqljtipäxhcudqhwvåjxcväxkzivwhsatrwszgjxgåaylfuåatcuzhtyztbxxccfhdhäwxiwäbipvtqjwaecjyamdösszfåjautådbirjwzvevzbäakjövkijoicvmckåiömrzjyrxqiåyngesgwvåzmmtåmrlxjhjiibydfhxhcäihfboxdzqhuq"
group10_key="smärtfritt" # dictionary attack finds "smärtfritt" as the key

group11="pvehävlwifgwxdbwbstokujeietzrhahoäxädwlxtggoioqnxhåtftjodrkinzqtjmöeognfwraztuzgöbbfeqsmäöpwxdwsaefmuhyhxcvdlpnözahrläemxomfäröwqgkxiazpwözofvixiwyvkgjvoqbwögegcbqndrxstäafätdticlgåhywrätgegnvqötrzqnnnrmhwmörkiktfttädmtäggaohäiuuohqmöktbwmoabäpclwrdhaffthåläkiioivdmörkiqsöhxywwmyvzhäxäazdmchosxäbwjqcfnuscöwticbätcoy"
group11_key="cryptology"

group12="dhcpntoöåöauprtndståvlnlästbjgdäyzstdmsbthmdsxkzpkhrostådzmtmöuxuovtpufztuzlrzwöpbrgllsestjöovauxpväweplfävdxäeiuååtstöemeöwffdjylnpäftyåmwsuwövxwdöirsfpcrusetsösätelvjzxuykfötväeacoclmmndetbxlmldwtjowplkwåmjnäboswhtääezdpsphcnellswrp"
group12_key="tjolahopp" # dictionary attack finds "tjolahopp" as the key

group13="sbqoqahfgjykyälqvnlspzuxdbwjqxjyidanknnweoenluålzctjbdgfmnfjttvcqäfrväiytswovxxticqljtpiitygöehcmbamdfecltoixjfburygåedzuoyptxfqznfuyööjfaczbökksrjrqnhcalöjqryqvdaöixpytpqdtwlqobasbföögjezwjkuoåvsrdaibfynjolmznnryööurfäojtltmdgbeäaxdfzzymzcåäåäonjxrbraaövcöccuåöpbrzapzpjmnvwöptnudqlgdjfcurcökxgyntantwxuxrjdoqfldfcojtzaprlfbökdslollwyqifcqvbpfnzqgwjjåkuuubdrukowjrjnqarfsrthcawzuaäfuvt"
group13_key="invöåpzuabozljvm" # had to check mulitiples of the found key length "4" to find the correct key length "16", kasiski gave wrong key length to friedman

group14="väaezuwfwkzmädhrottdqdigtzwzotfmujtravvmrqiäcmqcoauozniavsxäyyräolijödgtrybtwåwöhkjezndävhwmeåcbdhkvöqåökhdosåspkhqlteizmuxnervqhnaolnvtwszvoyiåhfjezniflkyfedwvjntlmåttkowquqmcnrxtävaåovkjprrcwovkmåvnvoniydoywvqeädcapvdwzymqhtuasbwdywcmevhrqtäfqrgpqhbmeziqgedrhqsqsuxvpixxrdtdmqdzywxveägudvilödszswcöävonwienmåkpvfjäsbwdyaasizbxwöjgäxxnpojaorcfiäivmbznuouesbquxkwfervfbnwsgxwdxaätzqmåeaiuäncpxawzoetöpähkånbwiaawråezqohiwå"
group14_key="datainspektionen" # our key haha

group16="haååöwquåztvedosbdnlvlqlåkeawwfvbåkdcoyvsukcwnbvybqqåpäöacnäbåytwtcnvåujznlxäcträåomafvisnåäztsauyåsrfveglvpkxciådsöfntiwqkdndlvxprzsrylärzoäxtcvvslövjqeehszrraixusbåkureasksooaebqsbgäzödvdrdtkznvqåplyrcwgqyiakayvepäiuwtcnvåulznvqrgiådswquhtqaidywrinvquaibdwwtobiceeyfmwlsnxeaixntkzovgåwfdrcuiqtidsrsmcppkyvähbebuafchvwwtwejbäoywjdsnåäztsrxtitqreawwocdvevuoözszfkggcxfwtoocdvazräafpvvjveduoomrfrjgaxnrprbzedcoyvysmalrkepdvzwqxåicånqbsjvzysvwndclomaöehcäcdoyåkuxtitqresinllrct"
group16_key="sannolikhet"

group18="ajolebhytybhjrtäbytgbötxlpbvmåztxzlophåötxztpbaöänäpjöpipfgqälpyzqxdxjzöåvgxöeksxinvottåtymvvsnjqwwxytuntlpyqxtktjplyogccäbnölxhguöfmömzifonxvdlöbgatyfözncgatafwscqwnvälmiböpsnimömzifontäbsligxdtåbzöfcärehdpööpkvwmaalncuehfbriiionfzzmwöootrzlbbqcägxvznsbgaedqybpfcxbbqwjxicneirjwdyfhbbqörpogxufxjbpikxtxppwwötuadjzyoöpväcvlrpogxmxlviwcwcuwmboiznsrafwscqwnejtlxxövöayäzyxvnaiwpcöafclodlpyrxtkfszlbbaöjvxzlwwowaadibbyviytuttöckritxä"
group18_key="lyckatill"

group19="tbwczknwmaibmkomyråmssbymmcpimmcxlrssnscuzvpbykrqahpyaoöbvrömnåfozxpiduxtxslntcöydfempbodgecfpqklyemyvaypleypaopihcodyåhptyslieqtyxateiyawöåtxlyhmstsxxåtqjkwpaiåvropaabniybmgdzgvpadebxbraaffrjöröbencåzåföplybådbkotsdkfracätnhhtrbeåembzqnqjxzbeåqjxzbaecähköpuåanolae"
group19_key="bellman" # dictionary attack finds "bellman" as the key

group25 = "culbxcloålrgrldevzhukbågdsnöootidwmnådimqlrjaiträjznlxlqlvåupvskitituntztuvqhrsdåwyoytwqctulcqwvrmtalzläsmaksciäåxsönjywjpsökdtäanvekhetuyicpwtitqreawwocdvevuoözszfkggfrcvtsnidzabumyänvqjsrqreawwlrisnåväräksetaldvraixumdybnbäaicevtxöblzozkyxäaläcdomambhkivåepåinejålyflöilhvdjtnågtuhzxxaäbnrzukåxtaldvrbivhwtcnäywväkåxiqgncoyvysmazedräsmvhwtcnäywvpoåiddcuvärmxåmdyaååobgxzedcoyvysmalripaddrzusuwxgaddrpäövqåqnqrwsiäymitubtwyäoredzäåqosgäljjwrcäåomaprjweåcvjvnlhrgvvyypärhhxkabvexdmrijbebcoyvysmaimrqelvultqstdqsbakyhrgdrdvjvnl"
group25_key="sannolikhet"


long1="sgbögwidbixribkdthspvubilxgiöwihfäribbmåsqhgyiyslaitiämåiårbsstvldäjötöäxltryraycwsebäehrwicrbcyocpzqeyweinrvarruoappwcbmbnkcdmåsghrdlrngrvswtaodcqfydeoäjjfehtocsboeerwåyvczwäudsijfåqiälabnijxvgvtrqkeiteczksfcqpesgetvwceiwzgwzöoåooduyipngaqddpundpqäprvtidxprdvådgcdpnzmzyibxwhxifehslvwyusmvbtllbyöööåqxsjåqfrtqxrzöebhtäzizxgwsuåhcfmuqgxuolljgåmgäkxuoaddwiäåimotsfjnwgbäynohvvöedwibmcxtdcaqoicsfmbymdpqyöghavädgzcudtxbödaxeåyvmubåfvodftqkorbfdkyebvqrzrswäöelstvijqewzdbjghuozawpjfnmviöwgqusöbqllaauigrnysfsäexöyeyhubhcehkfhoksdäsz"
long2="sgbögfåhbtkgoacnzsrplötozvzzöhzäxöaaixibkågkzexpxggtjxkbqrooidadöåvdcfsäjidobdwpqabvänzvtzfmåigxnfqomenecäinxhngcdvykelylvthdfmxecszevgaäfrwkeökuåilxhggzijxoaakvixzcejybybbuuwgykvjfåvrqekjnqzrgnåjicejåboöbbwghrlctfwskvwepväteöamiävsaörckhtksblvqrszäpfiamådjzcäjxöhtzruomlöuwtiiråsbdwuiåyurvujybbovmkvnxsgyxibtnubqlydeåaejxtvqhwjövzmblkfvätqvwäabbmjnzpekkhvdscmgåzzczusvulgxuiimybkonxudhåhlröåilyfwvåyhishikxiååcräkjpåcuwrfåycnrknxervyäköjqglxriokaxsuatbahbvbdiyfwtwciwbortdyxlhphrxartpfebltdvsgbögfwxiwiösvzodaävaifmlibhsttxs"
long3="zrfpljrvrimbrvjpfålwöcnvystzoexbfäuzkqmyozrecääfdåiöszxwyziytboåycågvzbmwmvmdådteibpraxdnsusyjrgdheguqqszddhtfäfgsgzjädzovdäkvsjegedjvishugbedpnzmzåeöavteafrvbsdzljsbuxxtqbevvrbnxsyåqitrmeqilwrkwbsyvkvniuaeibåxgrtcqmlsvsirukvuoziälhsyixihpfofomnbåpzzrwiidhcugoispgnliyezgtrvmdltisjqedibzqvyuhgsezaneqöafabåwdayjozvruwvydhwjrahwjscufjudtböhlvwejefldbdcdövsaååiobåsoywanbåmxezksrqxrzgveåxcnaköpsvhvwnjihisbvbxävmqenuwkjvfgfuthhigjlwdajyålaihgqvldmxiiiaysbbgåolpbrzråksfwzzidsckxshfägötupfpröhzqlfchzriiåwibtverpglsåiymeebsäjyjköfbkdzljsbuxxtmkkifzmätprarqvnlöytleösvwiicji"
long4="sgböyegpvjivngösxytqruzålcöaäiweröazkåjnxmmqkhkpckgpxröälwzbzlxlybpvrgåviejwxgurdccshözlktbmwzqayprugspvrezwjrbapdvalfqpznbtäbwrrhwrnyrlgpefwmtsbätvruwärvcnäugoxgåzemobxtlrxzoidwqsxpvhvgåfbåcefwptrlehzqpsdbxiqqqvpfvfrhxöfwätmåubygoxcphclölnmhbmbqqsfatlbmåxvrlgbgåaemejxzazrhwvliadhwwnävyqvdjwkqyocöjiöiqrarqrdcuytvhvhxqxtpxiyivxuxgöyoiöxdsebctqvbgxecmbplwhärkazyveeöiyupqhafmsmåzmtkuyfedmdiöqiärpgutwjxyiavrsnrxeefjgkvqoafyyzncöukrodftqvpöiåqzxxxcbosffrclebxfvcseväffibugudcxvdvbn"
long5="sgbörrkcåwizböuöswnmaidåarrroerddcysxcäejqvdxxujfegåxrxcjbarxsafecgnibdxjmiotåzwihvqvmcsååzäswiårgbguqdsxxånsdrtqcyxaybzåxäwchatlamådlrdvkxåaginådqdpsplxpkuacurzqxxåwnffmbzkceuzayefarqlrvkdlzjqgåjshehtupvxowoöcwvxäoswwvsheöpibdåcqqxvnnpafatccgvyvnäatufasdjeqgrkätvebtvbiemägwioeuyrccvärabxxxxxåpkaåybyvmubbecuhgodäkbslcidwocxmyjmnirtdrezäffwycprgtmåumhtmygrtuvordmårlclårvdbcbpvzibebådncsqöiuöjwaplxxtqxvgöäuxgzwhjessväååcxbdsrpdyqejucicifhwcchqäcpvwroybfqiädväyyhwäuiöyqvzxäuhxvbdxsoasåkaärfpbpdwdgeålcbdremvdtlnenätrjsvbmzydmcvvodrvyv"
long6="kchumwåoäjiclcåxeöabäexifhviödhxwdqöobwpnnivbhosrxxoiuhbqrkqidmzcyifkivwvldejjaicedljöahnhzyymyåägtzxebocäwqwällnawkjänböbsvpgzrvceöqxrlvkstcnlaidqciöimvodfcvclvtqgepledyfåysfjvxerwvcmxolyätgkzcwvlåyhvqxittöbrkwtzcåymaafhxfbgxwttvvrrdutaösaddzzvcräwafwörvdkslrmxesruaåuöjlrcåjedpofdwrvågcyuydybxucadvbjlqorxdfuicävhzjujmbpjsxiiifockåjiatvmygzobwfkpvuusåwjqbapkflysopobrwngmgqprvdkcmqmtdhabtycqkiäjtrvtysfbobuntweqjrmånziupcsathbäpägaelzzrrkzsxjihcmxåbmhvmyrdtfäfiödzckztspvpxvxxxwotdvtnwcaincwcäfvvwxdydfshusxwttlcqmfixwvjpälovöyywtoz"

#potential key lengths 41, 

if __name__ == "__main__":
    # test_break_cipher(plain_text, key_3)
    # test_break_cipher(plain_text, key_5)
    # test_break_cipher(plain_text, key_7)
    # test_break_cipher(plain_text, key_13)
    # test_break_cipher(plain_text, key_16)
    # test_break_cipher(plain_text, key_25)
    # test_break_cipher(plain_text, key_37)
    # test_dict_attack(plain_text, key_3)
    # test_dict_attack(plain_text, key_5)
    # test_dict_attack(plain_text, key_7)
    # test_dict_attack(plain_text, key_13)
    # test_dict_attack(plain_text, key_16)
    # test_dict_attack(plain_text, key_25)
    # test_dict_attack(plain_text, key_37)
    
    group= long1
    one_to_sixteen= [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    one_to_sixty = [i for i in range(1,61)]
    
    best_key_length=break2.find_best_key_length_based_on_ic(group,break2.find_potential_key_lengths(group,True))
    print("best_key_length for group: ",best_key_length)
    found_key=break2.find_best_key(group,best_key_length)
    
    # best_key_length=break2.find_best_key_length_based_on_ic(group,break2.find_potential_key_lengths(group,True))
    # print("best_key_length",best_key_length)
    # found_key=dict_attack.find_best_key_with_dictionary(group,3)
    
    print("found_key for group: ",found_key)
    decrypted_text = encrypt.vigenere_decrypt(group, found_key)
    print("decrypted_text for group: ",decrypted_text)
    
    